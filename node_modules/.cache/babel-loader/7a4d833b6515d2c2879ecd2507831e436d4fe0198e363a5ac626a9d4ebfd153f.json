{"ast":null,"code":"// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A /* \\n */:\n    case 0x21 /* ! */:\n    case 0x23 /* # */:\n    case 0x24 /* $ */:\n    case 0x25 /* % */:\n    case 0x26 /* & */:\n    case 0x2A /* * */:\n    case 0x2B /* + */:\n    case 0x2D /* - */:\n    case 0x3A /* : */:\n    case 0x3C /* < */:\n    case 0x3D /* = */:\n    case 0x3E /* > */:\n    case 0x40 /* @ */:\n    case 0x5B /* [ */:\n    case 0x5C /* \\ */:\n    case 0x5D /* ] */:\n    case 0x5E /* ^ */:\n    case 0x5F /* _ */:\n    case 0x60 /* ` */:\n    case 0x7B /* { */:\n    case 0x7D /* } */:\n    case 0x7E /* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n  if (pos === state.pos) {\n    return false;\n  }\n  if (!silent) {\n    state.pending += state.src.slice(state.pos, pos);\n  }\n  state.pos = pos;\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\r\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\r\n\r\nmodule.exports = function text(state, silent) {\r\n  var pos = state.pos,\r\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\r\n\r\n  // first char is terminator -> empty text\r\n  if (idx === 0) { return false; }\r\n\r\n  // no terminator -> text till end of string\r\n  if (idx < 0) {\r\n    if (!silent) { state.pending += state.src.slice(pos); }\r\n    state.pos = state.src.length;\r\n    return true;\r\n  }\r\n\r\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\r\n\r\n  state.pos += idx;\r\n\r\n  return true;\r\n};*/","map":{"version":3,"names":["isTerminatorChar","ch","module","exports","text","state","silent","pos","posMax","src","charCodeAt","pending","slice"],"sources":["C:/Users/居文韬/source/repos/corpus_development_system/node_modules/markdown-it/lib/rules_inline/text.js"],"sourcesContent":["// Skip text characters for text token, place those to pending buffer\r\n// and increment current pos\r\n\r\n'use strict';\r\n\r\n\r\n// Rule to skip pure text\r\n// '{}$%@~+=:' reserved for extentions\r\n\r\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\r\n\r\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\r\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\r\nfunction isTerminatorChar(ch) {\r\n  switch (ch) {\r\n    case 0x0A/* \\n */:\r\n    case 0x21/* ! */:\r\n    case 0x23/* # */:\r\n    case 0x24/* $ */:\r\n    case 0x25/* % */:\r\n    case 0x26/* & */:\r\n    case 0x2A/* * */:\r\n    case 0x2B/* + */:\r\n    case 0x2D/* - */:\r\n    case 0x3A/* : */:\r\n    case 0x3C/* < */:\r\n    case 0x3D/* = */:\r\n    case 0x3E/* > */:\r\n    case 0x40/* @ */:\r\n    case 0x5B/* [ */:\r\n    case 0x5C/* \\ */:\r\n    case 0x5D/* ] */:\r\n    case 0x5E/* ^ */:\r\n    case 0x5F/* _ */:\r\n    case 0x60/* ` */:\r\n    case 0x7B/* { */:\r\n    case 0x7D/* } */:\r\n    case 0x7E/* ~ */:\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nmodule.exports = function text(state, silent) {\r\n  var pos = state.pos;\r\n\r\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\r\n    pos++;\r\n  }\r\n\r\n  if (pos === state.pos) { return false; }\r\n\r\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\r\n\r\n  state.pos = pos;\r\n\r\n  return true;\r\n};\r\n\r\n// Alternative implementation, for memory.\r\n//\r\n// It costs 10% of performance, but allows extend terminators list, if place it\r\n// to `ParcerInline` property. Probably, will switch to it sometime, such\r\n// flexibility required.\r\n\r\n/*\r\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\r\n\r\nmodule.exports = function text(state, silent) {\r\n  var pos = state.pos,\r\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\r\n\r\n  // first char is terminator -> empty text\r\n  if (idx === 0) { return false; }\r\n\r\n  // no terminator -> text till end of string\r\n  if (idx < 0) {\r\n    if (!silent) { state.pending += state.src.slice(pos); }\r\n    state.pos = state.src.length;\r\n    return true;\r\n  }\r\n\r\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\r\n\r\n  state.pos += idx;\r\n\r\n  return true;\r\n};*/\r\n"],"mappings":"AAAA;AACA;;AAEA,YAAY;;AAGZ;AACA;;AAEA;;AAEA;AACA;AACA,SAASA,gBAAgBA,CAACC,EAAE,EAAE;EAC5B,QAAQA,EAAE;IACR,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;IACT,KAAK,IAAI;MACP,OAAO,IAAI;IACb;MACE,OAAO,KAAK;EAChB;AACF;AAEAC,MAAM,CAACC,OAAO,GAAG,SAASC,IAAIA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC5C,IAAIC,GAAG,GAAGF,KAAK,CAACE,GAAG;EAEnB,OAAOA,GAAG,GAAGF,KAAK,CAACG,MAAM,IAAI,CAACR,gBAAgB,CAACK,KAAK,CAACI,GAAG,CAACC,UAAU,CAACH,GAAG,CAAC,CAAC,EAAE;IACzEA,GAAG,EAAE;EACP;EAEA,IAAIA,GAAG,KAAKF,KAAK,CAACE,GAAG,EAAE;IAAE,OAAO,KAAK;EAAE;EAEvC,IAAI,CAACD,MAAM,EAAE;IAAED,KAAK,CAACM,OAAO,IAAIN,KAAK,CAACI,GAAG,CAACG,KAAK,CAACP,KAAK,CAACE,GAAG,EAAEA,GAAG,CAAC;EAAE;EAEjEF,KAAK,CAACE,GAAG,GAAGA,GAAG;EAEf,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}