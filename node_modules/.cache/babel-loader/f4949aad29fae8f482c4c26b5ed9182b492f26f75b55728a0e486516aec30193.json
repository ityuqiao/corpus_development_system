{"ast":null,"code":"// Proceess '\\n'\n\n'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar isSpace = require('../common/utils').isSpace;\nmodule.exports = function newline(state, silent) {\n  var pmax,\n    max,\n    ws,\n    pos = state.pos;\n  if (state.src.charCodeAt(pos) !== 0x0A /* \\n */) {\n    return false;\n  }\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        ws = pmax - 1;\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\n        state.pending = state.pending.slice(0, ws);\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n  state.pos = pos;\n  return true;\n};","map":{"version":3,"names":["require","isSpace","module","exports","newline","state","silent","pmax","max","ws","pos","src","charCodeAt","pending","length","posMax","slice","push"],"sources":["C:/Users/居文韬/source/repos/corpus_development_system/node_modules/markdown-it/lib/rules_inline/newline.js"],"sourcesContent":["// Proceess '\\n'\r\n\r\n'use strict';\r\n\r\nvar isSpace = require('../common/utils').isSpace;\r\n\r\n\r\nmodule.exports = function newline(state, silent) {\r\n  var pmax, max, ws, pos = state.pos;\r\n\r\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\r\n\r\n  pmax = state.pending.length - 1;\r\n  max = state.posMax;\r\n\r\n  // '  \\n' -> hardbreak\r\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\r\n  // Pending string is stored in concat mode, indexed lookups will cause\r\n  // convertion to flat mode.\r\n  if (!silent) {\r\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\r\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\r\n        // Find whitespaces tail of pending chars.\r\n        ws = pmax - 1;\r\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\r\n\r\n        state.pending = state.pending.slice(0, ws);\r\n        state.push('hardbreak', 'br', 0);\r\n      } else {\r\n        state.pending = state.pending.slice(0, -1);\r\n        state.push('softbreak', 'br', 0);\r\n      }\r\n\r\n    } else {\r\n      state.push('softbreak', 'br', 0);\r\n    }\r\n  }\r\n\r\n  pos++;\r\n\r\n  // skip heading spaces for next line\r\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\r\n\r\n  state.pos = pos;\r\n  return true;\r\n};\r\n"],"mappings":"AAAA;;AAEA,YAAY;;AAACA,OAAA;AAEb,IAAIC,OAAO,GAAGD,OAAO,CAAC,iBAAiB,CAAC,CAACC,OAAO;AAGhDC,MAAM,CAACC,OAAO,GAAG,SAASC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC/C,IAAIC,IAAI;IAAEC,GAAG;IAAEC,EAAE;IAAEC,GAAG,GAAGL,KAAK,CAACK,GAAG;EAElC,IAAIL,KAAK,CAACM,GAAG,CAACC,UAAU,CAACF,GAAG,CAAC,KAAK,IAAI,WAAU;IAAE,OAAO,KAAK;EAAE;EAEhEH,IAAI,GAAGF,KAAK,CAACQ,OAAO,CAACC,MAAM,GAAG,CAAC;EAC/BN,GAAG,GAAGH,KAAK,CAACU,MAAM;;EAElB;EACA;EACA;EACA;EACA,IAAI,CAACT,MAAM,EAAE;IACX,IAAIC,IAAI,IAAI,CAAC,IAAIF,KAAK,CAACQ,OAAO,CAACD,UAAU,CAACL,IAAI,CAAC,KAAK,IAAI,EAAE;MACxD,IAAIA,IAAI,IAAI,CAAC,IAAIF,KAAK,CAACQ,OAAO,CAACD,UAAU,CAACL,IAAI,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;QAC5D;QACAE,EAAE,GAAGF,IAAI,GAAG,CAAC;QACb,OAAOE,EAAE,IAAI,CAAC,IAAIJ,KAAK,CAACQ,OAAO,CAACD,UAAU,CAACH,EAAE,GAAG,CAAC,CAAC,KAAK,IAAI,EAAEA,EAAE,EAAE;QAEjEJ,KAAK,CAACQ,OAAO,GAAGR,KAAK,CAACQ,OAAO,CAACG,KAAK,CAAC,CAAC,EAAEP,EAAE,CAAC;QAC1CJ,KAAK,CAACY,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;MAClC,CAAC,MAAM;QACLZ,KAAK,CAACQ,OAAO,GAAGR,KAAK,CAACQ,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1CX,KAAK,CAACY,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;MAClC;IAEF,CAAC,MAAM;MACLZ,KAAK,CAACY,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;IAClC;EACF;EAEAP,GAAG,EAAE;;EAEL;EACA,OAAOA,GAAG,GAAGF,GAAG,IAAIP,OAAO,CAACI,KAAK,CAACM,GAAG,CAACC,UAAU,CAACF,GAAG,CAAC,CAAC,EAAE;IAAEA,GAAG,EAAE;EAAE;EAEjEL,KAAK,CAACK,GAAG,GAAGA,GAAG;EACf,OAAO,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}