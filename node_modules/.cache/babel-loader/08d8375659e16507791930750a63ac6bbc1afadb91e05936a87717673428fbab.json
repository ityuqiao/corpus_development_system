{"ast":null,"code":"// Main parser class\n\n'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\nvar utils = require('./common/utils');\nvar helpers = require('./helpers');\nvar Renderer = require('./renderer');\nvar ParserCore = require('./parser_core');\nvar ParserBlock = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt = require('linkify-it');\nvar mdurl = require('mdurl');\nvar punycode = require('punycode');\nvar config = {\n  default: require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:'];\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) {/**/}\n    }\n  }\n  return mdurl.encode(mdurl.format(parsed));\n}\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) {/**/}\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');\n}\n\n/**\r\n * class MarkdownIt\r\n *\r\n * Main parser/renderer class.\r\n *\r\n * ##### Usage\r\n *\r\n * ```javascript\r\n * // node.js, \"classic\" way:\r\n * var MarkdownIt = require('markdown-it'),\r\n *     md = new MarkdownIt();\r\n * var result = md.render('# markdown-it rulezz!');\r\n *\r\n * // node.js, the same, but with sugar:\r\n * var md = require('markdown-it')();\r\n * var result = md.render('# markdown-it rulezz!');\r\n *\r\n * // browser without AMD, added to \"window\" on script load\r\n * // Note, there are no dash.\r\n * var md = window.markdownit();\r\n * var result = md.render('# markdown-it rulezz!');\r\n * ```\r\n *\r\n * Single line rendering, without paragraph wrap:\r\n *\r\n * ```javascript\r\n * var md = require('markdown-it')();\r\n * var result = md.renderInline('__markdown-it__ rulezz!');\r\n * ```\r\n **/\n\n/**\r\n * new MarkdownIt([presetName, options])\r\n * - presetName (String): optional, `commonmark` / `zero`\r\n * - options (Object)\r\n *\r\n * Creates parser instanse with given config. Can be called without `new`.\r\n *\r\n * ##### presetName\r\n *\r\n * MarkdownIt provides named presets as a convenience to quickly\r\n * enable/disable active syntax rules and options for common use cases.\r\n *\r\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\r\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\r\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\r\n *   similar to GFM, used when no preset name given. Enables all available rules,\r\n *   but still without html, typographer & autolinker.\r\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\r\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\r\n *   For example, when you need only `bold` and `italic` markup and nothing else.\r\n *\r\n * ##### options:\r\n *\r\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\r\n *   That's not safe! You may need external sanitizer to protect output from XSS.\r\n *   It's better to extend features via plugins, instead of enabling HTML.\r\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\r\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\r\n *   world you will need HTML output.\r\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\r\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\r\n *   Can be useful for external highlighters.\r\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\r\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\r\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\r\n *   quotes beautification (smartquotes).\r\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\r\n *   pairs, when typographer enabled and smartquotes on. For example, you can\r\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\r\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\r\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\r\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\r\n *   return empty string if the source was not changed and should be escaped\r\n *   externaly. If result starts with <pre... internal wrapper is skipped.\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * // commonmark mode\r\n * var md = require('markdown-it')('commonmark');\r\n *\r\n * // default mode\r\n * var md = require('markdown-it')();\r\n *\r\n * // enable everything\r\n * var md = require('markdown-it')({\r\n *   html: true,\r\n *   linkify: true,\r\n *   typographer: true\r\n * });\r\n * ```\r\n *\r\n * ##### Syntax highlighting\r\n *\r\n * ```js\r\n * var hljs = require('highlight.js') // https://highlightjs.org/\r\n *\r\n * var md = require('markdown-it')({\r\n *   highlight: function (str, lang) {\r\n *     if (lang && hljs.getLanguage(lang)) {\r\n *       try {\r\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\r\n *       } catch (__) {}\r\n *     }\r\n *\r\n *     return ''; // use external default escaping\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * Or with full wrapper override (if you need assign class to `<pre>`):\r\n *\r\n * ```javascript\r\n * var hljs = require('highlight.js') // https://highlightjs.org/\r\n *\r\n * // Actual default values\r\n * var md = require('markdown-it')({\r\n *   highlight: function (str, lang) {\r\n *     if (lang && hljs.getLanguage(lang)) {\r\n *       try {\r\n *         return '<pre class=\"hljs\"><code>' +\r\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\r\n *                '</code></pre>';\r\n *       } catch (__) {}\r\n *     }\r\n *\r\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\r\n *   }\r\n * });\r\n * ```\r\n *\r\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\r\n   * MarkdownIt#inline -> ParserInline\r\n   *\r\n   * Instance of [[ParserInline]]. You may need it to add new rules when\r\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\r\n   * [[MarkdownIt.enable]].\r\n   **/\n  this.inline = new ParserInline();\n\n  /**\r\n   * MarkdownIt#block -> ParserBlock\r\n   *\r\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\r\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\r\n   * [[MarkdownIt.enable]].\r\n   **/\n  this.block = new ParserBlock();\n\n  /**\r\n   * MarkdownIt#core -> Core\r\n   *\r\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\r\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\r\n   * [[MarkdownIt.enable]].\r\n   **/\n  this.core = new ParserCore();\n\n  /**\r\n   * MarkdownIt#renderer -> Renderer\r\n   *\r\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\r\n   * rules for new token types, generated by plugins.\r\n   *\r\n   * ##### Example\r\n   *\r\n   * ```javascript\r\n   * var md = require('markdown-it')();\r\n   *\r\n   * function myToken(tokens, idx, options, env, self) {\r\n   *   //...\r\n   *   return result;\r\n   * };\r\n   *\r\n   * md.renderer.rules['my_token'] = myToken\r\n   * ```\r\n   *\r\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\r\n   **/\n  this.renderer = new Renderer();\n\n  /**\r\n   * MarkdownIt#linkify -> LinkifyIt\r\n   *\r\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\r\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\r\n   * rule.\r\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\r\n   * MarkdownIt#validateLink(url) -> Boolean\r\n   *\r\n   * Link validation function. CommonMark allows too much in links. By default\r\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\r\n   * except some embedded image types.\r\n   *\r\n   * You can change this behaviour:\r\n   *\r\n   * ```javascript\r\n   * var md = require('markdown-it')();\r\n   * // enable everything\r\n   * md.validateLink = function () { return true; }\r\n   * ```\r\n   **/\n  this.validateLink = validateLink;\n\n  /**\r\n   * MarkdownIt#normalizeLink(url) -> String\r\n   *\r\n   * Function used to encode link url to a machine-readable format,\r\n   * which includes url-encoding, punycode, etc.\r\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\r\n   * MarkdownIt#normalizeLinkText(url) -> String\r\n   *\r\n   * Function used to decode link url to a human-readable format`\r\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\r\n   * MarkdownIt#utils -> utils\r\n   *\r\n   * Assorted utility functions, useful to write plugins. See details\r\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\r\n   **/\n  this.utils = utils;\n\n  /**\r\n   * MarkdownIt#helpers -> helpers\r\n   *\r\n   * Link components parser functions, useful to write plugins. See details\r\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\r\n   **/\n  this.helpers = utils.assign({}, helpers);\n  this.options = {};\n  this.configure(presetName);\n  if (options) {\n    this.set(options);\n  }\n}\n\n/** chainable\r\n * MarkdownIt.set(options)\r\n *\r\n * Set parser options (in the same format as in constructor). Probably, you\r\n * will never need it, but you can change options after constructor call.\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * var md = require('markdown-it')()\r\n *             .set({ html: true, breaks: true })\r\n *             .set({ typographer, true });\r\n * ```\r\n *\r\n * __Note:__ To achieve the best possible performance, don't modify a\r\n * `markdown-it` instance options on the fly. If you need multiple configurations\r\n * it's best to create multiple instances and initialize each with separate\r\n * config.\r\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n/** chainable, internal\r\n * MarkdownIt.configure(presets)\r\n *\r\n * Batch load of all options and compenent settings. This is internal method,\r\n * and you probably will not need it. But if you will - see available presets\r\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\r\n *\r\n * We strongly recommend to use presets instead of direct config loads. That\r\n * will give better compatibility with next versions.\r\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this,\n    presetName;\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) {\n      throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name');\n    }\n  }\n  if (!presets) {\n    throw new Error('Wrong `markdown-it` preset, can\\'t be empty');\n  }\n  if (presets.options) {\n    self.set(presets.options);\n  }\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n/** chainable\r\n * MarkdownIt.enable(list, ignoreInvalid)\r\n * - list (String|Array): rule name or list of rule names to enable\r\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\r\n *\r\n * Enable list or rules. It will automatically find appropriate components,\r\n * containing rules with given names. If rule not found, and `ignoreInvalid`\r\n * not set - throws exception.\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * var md = require('markdown-it')()\r\n *             .enable(['sub', 'sup'])\r\n *             .disable('smartquotes');\r\n * ```\r\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n  result = result.concat(this.inline.ruler2.enable(list, true));\n  var missed = list.filter(function (name) {\n    return result.indexOf(name) < 0;\n  });\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n/** chainable\r\n * MarkdownIt.disable(list, ignoreInvalid)\r\n * - list (String|Array): rule name or list of rule names to disable.\r\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\r\n *\r\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\r\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n  result = result.concat(this.inline.ruler2.disable(list, true));\n  var missed = list.filter(function (name) {\n    return result.indexOf(name) < 0;\n  });\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n/** chainable\r\n * MarkdownIt.use(plugin, params)\r\n *\r\n * Load specified plugin with given params into current parser instance.\r\n * It's just a sugar to call `plugin(md, params)` with curring.\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * var iterator = require('markdown-it-for-inline');\r\n * var md = require('markdown-it')()\r\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\r\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\r\n *             });\r\n * ```\r\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [this].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n/** internal\r\n * MarkdownIt.parse(src, env) -> Array\r\n * - src (String): source string\r\n * - env (Object): environment sandbox\r\n *\r\n * Parse input string and return list of block tokens (special token type\r\n * \"inline\" will contain list of inline tokens). You should not call this\r\n * method directly, until you write custom renderer (for example, to produce\r\n * AST).\r\n *\r\n * `env` is used to pass data between \"distributed\" rules and return additional\r\n * metadata like reference info, needed for the renderer. It also can be used to\r\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\r\n * and then pass updated object to renderer.\r\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n  var state = new this.core.State(src, this, env);\n  this.core.process(state);\n  return state.tokens;\n};\n\n/**\r\n * MarkdownIt.render(src [, env]) -> String\r\n * - src (String): source string\r\n * - env (Object): environment sandbox\r\n *\r\n * Render markdown string into html. It does all magic for you :).\r\n *\r\n * `env` can be used to inject additional metadata (`{}` by default).\r\n * But you will not need it with high probability. See also comment\r\n * in [[MarkdownIt.parse]].\r\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n/** internal\r\n * MarkdownIt.parseInline(src, env) -> Array\r\n * - src (String): source string\r\n * - env (Object): environment sandbox\r\n *\r\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\r\n * block tokens list with the single `inline` element, containing parsed inline\r\n * tokens in `children` property. Also updates `env` object.\r\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n  state.inlineMode = true;\n  this.core.process(state);\n  return state.tokens;\n};\n\n/**\r\n * MarkdownIt.renderInline(src [, env]) -> String\r\n * - src (String): source string\r\n * - env (Object): environment sandbox\r\n *\r\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\r\n * will NOT be wrapped into `<p>` tags.\r\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\nmodule.exports = MarkdownIt;","map":{"version":3,"names":["require","utils","helpers","Renderer","ParserCore","ParserBlock","ParserInline","LinkifyIt","mdurl","punycode","config","default","zero","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","validateLink","url","str","trim","toLowerCase","test","RECODE_HOSTNAME_FOR","normalizeLink","parsed","parse","hostname","protocol","indexOf","toASCII","er","encode","format","normalizeLinkText","toUnicode","decode","defaultChars","MarkdownIt","presetName","options","isString","inline","block","core","renderer","linkify","assign","configure","set","prototype","presets","self","Error","components","Object","keys","forEach","name","rules","ruler","enableOnly","rules2","ruler2","enable","list","ignoreInvalid","result","Array","isArray","chain","concat","missed","filter","length","disable","use","plugin","args","slice","call","arguments","apply","src","env","state","State","process","tokens","render","parseInline","inlineMode","renderInline","module","exports"],"sources":["C:/Users/居文韬/source/repos/corpus_development_system/node_modules/markdown-it/lib/index.js"],"sourcesContent":["// Main parser class\r\n\r\n'use strict';\r\n\r\n\r\nvar utils        = require('./common/utils');\r\nvar helpers      = require('./helpers');\r\nvar Renderer     = require('./renderer');\r\nvar ParserCore   = require('./parser_core');\r\nvar ParserBlock  = require('./parser_block');\r\nvar ParserInline = require('./parser_inline');\r\nvar LinkifyIt    = require('linkify-it');\r\nvar mdurl        = require('mdurl');\r\nvar punycode     = require('punycode');\r\n\r\n\r\nvar config = {\r\n  default: require('./presets/default'),\r\n  zero: require('./presets/zero'),\r\n  commonmark: require('./presets/commonmark')\r\n};\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n//\r\n// This validator can prohibit more than really needed to prevent XSS. It's a\r\n// tradeoff to keep code simple and to be secure by default.\r\n//\r\n// If you need different setup - override validator method as you wish. Or\r\n// replace it with dummy function and use external sanitizer.\r\n//\r\n\r\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\r\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\r\n\r\nfunction validateLink(url) {\r\n  // url should be normalized at this point, and existing entities are decoded\r\n  var str = url.trim().toLowerCase();\r\n\r\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\r\n\r\nfunction normalizeLink(url) {\r\n  var parsed = mdurl.parse(url, true);\r\n\r\n  if (parsed.hostname) {\r\n    // Encode hostnames in urls like:\r\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\r\n    //\r\n    // We don't encode unknown schemas, because it's likely that we encode\r\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\r\n    //\r\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\r\n      try {\r\n        parsed.hostname = punycode.toASCII(parsed.hostname);\r\n      } catch (er) { /**/ }\r\n    }\r\n  }\r\n\r\n  return mdurl.encode(mdurl.format(parsed));\r\n}\r\n\r\nfunction normalizeLinkText(url) {\r\n  var parsed = mdurl.parse(url, true);\r\n\r\n  if (parsed.hostname) {\r\n    // Encode hostnames in urls like:\r\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\r\n    //\r\n    // We don't encode unknown schemas, because it's likely that we encode\r\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\r\n    //\r\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\r\n      try {\r\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\r\n      } catch (er) { /**/ }\r\n    }\r\n  }\r\n\r\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\r\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');\r\n}\r\n\r\n\r\n/**\r\n * class MarkdownIt\r\n *\r\n * Main parser/renderer class.\r\n *\r\n * ##### Usage\r\n *\r\n * ```javascript\r\n * // node.js, \"classic\" way:\r\n * var MarkdownIt = require('markdown-it'),\r\n *     md = new MarkdownIt();\r\n * var result = md.render('# markdown-it rulezz!');\r\n *\r\n * // node.js, the same, but with sugar:\r\n * var md = require('markdown-it')();\r\n * var result = md.render('# markdown-it rulezz!');\r\n *\r\n * // browser without AMD, added to \"window\" on script load\r\n * // Note, there are no dash.\r\n * var md = window.markdownit();\r\n * var result = md.render('# markdown-it rulezz!');\r\n * ```\r\n *\r\n * Single line rendering, without paragraph wrap:\r\n *\r\n * ```javascript\r\n * var md = require('markdown-it')();\r\n * var result = md.renderInline('__markdown-it__ rulezz!');\r\n * ```\r\n **/\r\n\r\n/**\r\n * new MarkdownIt([presetName, options])\r\n * - presetName (String): optional, `commonmark` / `zero`\r\n * - options (Object)\r\n *\r\n * Creates parser instanse with given config. Can be called without `new`.\r\n *\r\n * ##### presetName\r\n *\r\n * MarkdownIt provides named presets as a convenience to quickly\r\n * enable/disable active syntax rules and options for common use cases.\r\n *\r\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\r\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\r\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\r\n *   similar to GFM, used when no preset name given. Enables all available rules,\r\n *   but still without html, typographer & autolinker.\r\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\r\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\r\n *   For example, when you need only `bold` and `italic` markup and nothing else.\r\n *\r\n * ##### options:\r\n *\r\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\r\n *   That's not safe! You may need external sanitizer to protect output from XSS.\r\n *   It's better to extend features via plugins, instead of enabling HTML.\r\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\r\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\r\n *   world you will need HTML output.\r\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\r\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\r\n *   Can be useful for external highlighters.\r\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\r\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\r\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\r\n *   quotes beautification (smartquotes).\r\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\r\n *   pairs, when typographer enabled and smartquotes on. For example, you can\r\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\r\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\r\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\r\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\r\n *   return empty string if the source was not changed and should be escaped\r\n *   externaly. If result starts with <pre... internal wrapper is skipped.\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * // commonmark mode\r\n * var md = require('markdown-it')('commonmark');\r\n *\r\n * // default mode\r\n * var md = require('markdown-it')();\r\n *\r\n * // enable everything\r\n * var md = require('markdown-it')({\r\n *   html: true,\r\n *   linkify: true,\r\n *   typographer: true\r\n * });\r\n * ```\r\n *\r\n * ##### Syntax highlighting\r\n *\r\n * ```js\r\n * var hljs = require('highlight.js') // https://highlightjs.org/\r\n *\r\n * var md = require('markdown-it')({\r\n *   highlight: function (str, lang) {\r\n *     if (lang && hljs.getLanguage(lang)) {\r\n *       try {\r\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\r\n *       } catch (__) {}\r\n *     }\r\n *\r\n *     return ''; // use external default escaping\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * Or with full wrapper override (if you need assign class to `<pre>`):\r\n *\r\n * ```javascript\r\n * var hljs = require('highlight.js') // https://highlightjs.org/\r\n *\r\n * // Actual default values\r\n * var md = require('markdown-it')({\r\n *   highlight: function (str, lang) {\r\n *     if (lang && hljs.getLanguage(lang)) {\r\n *       try {\r\n *         return '<pre class=\"hljs\"><code>' +\r\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\r\n *                '</code></pre>';\r\n *       } catch (__) {}\r\n *     }\r\n *\r\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\r\n *   }\r\n * });\r\n * ```\r\n *\r\n **/\r\nfunction MarkdownIt(presetName, options) {\r\n  if (!(this instanceof MarkdownIt)) {\r\n    return new MarkdownIt(presetName, options);\r\n  }\r\n\r\n  if (!options) {\r\n    if (!utils.isString(presetName)) {\r\n      options = presetName || {};\r\n      presetName = 'default';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * MarkdownIt#inline -> ParserInline\r\n   *\r\n   * Instance of [[ParserInline]]. You may need it to add new rules when\r\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\r\n   * [[MarkdownIt.enable]].\r\n   **/\r\n  this.inline = new ParserInline();\r\n\r\n  /**\r\n   * MarkdownIt#block -> ParserBlock\r\n   *\r\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\r\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\r\n   * [[MarkdownIt.enable]].\r\n   **/\r\n  this.block = new ParserBlock();\r\n\r\n  /**\r\n   * MarkdownIt#core -> Core\r\n   *\r\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\r\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\r\n   * [[MarkdownIt.enable]].\r\n   **/\r\n  this.core = new ParserCore();\r\n\r\n  /**\r\n   * MarkdownIt#renderer -> Renderer\r\n   *\r\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\r\n   * rules for new token types, generated by plugins.\r\n   *\r\n   * ##### Example\r\n   *\r\n   * ```javascript\r\n   * var md = require('markdown-it')();\r\n   *\r\n   * function myToken(tokens, idx, options, env, self) {\r\n   *   //...\r\n   *   return result;\r\n   * };\r\n   *\r\n   * md.renderer.rules['my_token'] = myToken\r\n   * ```\r\n   *\r\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\r\n   **/\r\n  this.renderer = new Renderer();\r\n\r\n  /**\r\n   * MarkdownIt#linkify -> LinkifyIt\r\n   *\r\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\r\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\r\n   * rule.\r\n   **/\r\n  this.linkify = new LinkifyIt();\r\n\r\n  /**\r\n   * MarkdownIt#validateLink(url) -> Boolean\r\n   *\r\n   * Link validation function. CommonMark allows too much in links. By default\r\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\r\n   * except some embedded image types.\r\n   *\r\n   * You can change this behaviour:\r\n   *\r\n   * ```javascript\r\n   * var md = require('markdown-it')();\r\n   * // enable everything\r\n   * md.validateLink = function () { return true; }\r\n   * ```\r\n   **/\r\n  this.validateLink = validateLink;\r\n\r\n  /**\r\n   * MarkdownIt#normalizeLink(url) -> String\r\n   *\r\n   * Function used to encode link url to a machine-readable format,\r\n   * which includes url-encoding, punycode, etc.\r\n   **/\r\n  this.normalizeLink = normalizeLink;\r\n\r\n  /**\r\n   * MarkdownIt#normalizeLinkText(url) -> String\r\n   *\r\n   * Function used to decode link url to a human-readable format`\r\n   **/\r\n  this.normalizeLinkText = normalizeLinkText;\r\n\r\n\r\n  // Expose utils & helpers for easy acces from plugins\r\n\r\n  /**\r\n   * MarkdownIt#utils -> utils\r\n   *\r\n   * Assorted utility functions, useful to write plugins. See details\r\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\r\n   **/\r\n  this.utils = utils;\r\n\r\n  /**\r\n   * MarkdownIt#helpers -> helpers\r\n   *\r\n   * Link components parser functions, useful to write plugins. See details\r\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\r\n   **/\r\n  this.helpers = utils.assign({}, helpers);\r\n\r\n\r\n  this.options = {};\r\n  this.configure(presetName);\r\n\r\n  if (options) { this.set(options); }\r\n}\r\n\r\n\r\n/** chainable\r\n * MarkdownIt.set(options)\r\n *\r\n * Set parser options (in the same format as in constructor). Probably, you\r\n * will never need it, but you can change options after constructor call.\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * var md = require('markdown-it')()\r\n *             .set({ html: true, breaks: true })\r\n *             .set({ typographer, true });\r\n * ```\r\n *\r\n * __Note:__ To achieve the best possible performance, don't modify a\r\n * `markdown-it` instance options on the fly. If you need multiple configurations\r\n * it's best to create multiple instances and initialize each with separate\r\n * config.\r\n **/\r\nMarkdownIt.prototype.set = function (options) {\r\n  utils.assign(this.options, options);\r\n  return this;\r\n};\r\n\r\n\r\n/** chainable, internal\r\n * MarkdownIt.configure(presets)\r\n *\r\n * Batch load of all options and compenent settings. This is internal method,\r\n * and you probably will not need it. But if you will - see available presets\r\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\r\n *\r\n * We strongly recommend to use presets instead of direct config loads. That\r\n * will give better compatibility with next versions.\r\n **/\r\nMarkdownIt.prototype.configure = function (presets) {\r\n  var self = this, presetName;\r\n\r\n  if (utils.isString(presets)) {\r\n    presetName = presets;\r\n    presets = config[presetName];\r\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\r\n  }\r\n\r\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\r\n\r\n  if (presets.options) { self.set(presets.options); }\r\n\r\n  if (presets.components) {\r\n    Object.keys(presets.components).forEach(function (name) {\r\n      if (presets.components[name].rules) {\r\n        self[name].ruler.enableOnly(presets.components[name].rules);\r\n      }\r\n      if (presets.components[name].rules2) {\r\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\r\n      }\r\n    });\r\n  }\r\n  return this;\r\n};\r\n\r\n\r\n/** chainable\r\n * MarkdownIt.enable(list, ignoreInvalid)\r\n * - list (String|Array): rule name or list of rule names to enable\r\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\r\n *\r\n * Enable list or rules. It will automatically find appropriate components,\r\n * containing rules with given names. If rule not found, and `ignoreInvalid`\r\n * not set - throws exception.\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * var md = require('markdown-it')()\r\n *             .enable(['sub', 'sup'])\r\n *             .disable('smartquotes');\r\n * ```\r\n **/\r\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\r\n  var result = [];\r\n\r\n  if (!Array.isArray(list)) { list = [ list ]; }\r\n\r\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\r\n    result = result.concat(this[chain].ruler.enable(list, true));\r\n  }, this);\r\n\r\n  result = result.concat(this.inline.ruler2.enable(list, true));\r\n\r\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\r\n\r\n  if (missed.length && !ignoreInvalid) {\r\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n\r\n/** chainable\r\n * MarkdownIt.disable(list, ignoreInvalid)\r\n * - list (String|Array): rule name or list of rule names to disable.\r\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\r\n *\r\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\r\n **/\r\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\r\n  var result = [];\r\n\r\n  if (!Array.isArray(list)) { list = [ list ]; }\r\n\r\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\r\n    result = result.concat(this[chain].ruler.disable(list, true));\r\n  }, this);\r\n\r\n  result = result.concat(this.inline.ruler2.disable(list, true));\r\n\r\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\r\n\r\n  if (missed.length && !ignoreInvalid) {\r\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\r\n  }\r\n  return this;\r\n};\r\n\r\n\r\n/** chainable\r\n * MarkdownIt.use(plugin, params)\r\n *\r\n * Load specified plugin with given params into current parser instance.\r\n * It's just a sugar to call `plugin(md, params)` with curring.\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * var iterator = require('markdown-it-for-inline');\r\n * var md = require('markdown-it')()\r\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\r\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\r\n *             });\r\n * ```\r\n **/\r\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\r\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\r\n  plugin.apply(plugin, args);\r\n  return this;\r\n};\r\n\r\n\r\n/** internal\r\n * MarkdownIt.parse(src, env) -> Array\r\n * - src (String): source string\r\n * - env (Object): environment sandbox\r\n *\r\n * Parse input string and return list of block tokens (special token type\r\n * \"inline\" will contain list of inline tokens). You should not call this\r\n * method directly, until you write custom renderer (for example, to produce\r\n * AST).\r\n *\r\n * `env` is used to pass data between \"distributed\" rules and return additional\r\n * metadata like reference info, needed for the renderer. It also can be used to\r\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\r\n * and then pass updated object to renderer.\r\n **/\r\nMarkdownIt.prototype.parse = function (src, env) {\r\n  if (typeof src !== 'string') {\r\n    throw new Error('Input data should be a String');\r\n  }\r\n\r\n  var state = new this.core.State(src, this, env);\r\n\r\n  this.core.process(state);\r\n\r\n  return state.tokens;\r\n};\r\n\r\n\r\n/**\r\n * MarkdownIt.render(src [, env]) -> String\r\n * - src (String): source string\r\n * - env (Object): environment sandbox\r\n *\r\n * Render markdown string into html. It does all magic for you :).\r\n *\r\n * `env` can be used to inject additional metadata (`{}` by default).\r\n * But you will not need it with high probability. See also comment\r\n * in [[MarkdownIt.parse]].\r\n **/\r\nMarkdownIt.prototype.render = function (src, env) {\r\n  env = env || {};\r\n\r\n  return this.renderer.render(this.parse(src, env), this.options, env);\r\n};\r\n\r\n\r\n/** internal\r\n * MarkdownIt.parseInline(src, env) -> Array\r\n * - src (String): source string\r\n * - env (Object): environment sandbox\r\n *\r\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\r\n * block tokens list with the single `inline` element, containing parsed inline\r\n * tokens in `children` property. Also updates `env` object.\r\n **/\r\nMarkdownIt.prototype.parseInline = function (src, env) {\r\n  var state = new this.core.State(src, this, env);\r\n\r\n  state.inlineMode = true;\r\n  this.core.process(state);\r\n\r\n  return state.tokens;\r\n};\r\n\r\n\r\n/**\r\n * MarkdownIt.renderInline(src [, env]) -> String\r\n * - src (String): source string\r\n * - env (Object): environment sandbox\r\n *\r\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\r\n * will NOT be wrapped into `<p>` tags.\r\n **/\r\nMarkdownIt.prototype.renderInline = function (src, env) {\r\n  env = env || {};\r\n\r\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\r\n};\r\n\r\n\r\nmodule.exports = MarkdownIt;\r\n"],"mappings":"AAAA;;AAEA,YAAY;;AAACA,OAAA;AAGb,IAAIC,KAAK,GAAUD,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAIE,OAAO,GAAQF,OAAO,CAAC,WAAW,CAAC;AACvC,IAAIG,QAAQ,GAAOH,OAAO,CAAC,YAAY,CAAC;AACxC,IAAII,UAAU,GAAKJ,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAIK,WAAW,GAAIL,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAIM,YAAY,GAAGN,OAAO,CAAC,iBAAiB,CAAC;AAC7C,IAAIO,SAAS,GAAMP,OAAO,CAAC,YAAY,CAAC;AACxC,IAAIQ,KAAK,GAAUR,OAAO,CAAC,OAAO,CAAC;AACnC,IAAIS,QAAQ,GAAOT,OAAO,CAAC,UAAU,CAAC;AAGtC,IAAIU,MAAM,GAAG;EACXC,OAAO,EAAEX,OAAO,CAAC,mBAAmB,CAAC;EACrCY,IAAI,EAAEZ,OAAO,CAAC,gBAAgB,CAAC;EAC/Ba,UAAU,EAAEb,OAAO,CAAC,sBAAsB;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIc,YAAY,GAAG,mCAAmC;AACtD,IAAIC,YAAY,GAAG,mCAAmC;AAEtD,SAASC,YAAYA,CAACC,GAAG,EAAE;EACzB;EACA,IAAIC,GAAG,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAElC,OAAON,YAAY,CAACO,IAAI,CAACH,GAAG,CAAC,GAAIH,YAAY,CAACM,IAAI,CAACH,GAAG,CAAC,GAAG,IAAI,GAAG,KAAK,GAAI,IAAI;AAChF;;AAEA;;AAGA,IAAII,mBAAmB,GAAG,CAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAE;AAE1D,SAASC,aAAaA,CAACN,GAAG,EAAE;EAC1B,IAAIO,MAAM,GAAGhB,KAAK,CAACiB,KAAK,CAACR,GAAG,EAAE,IAAI,CAAC;EAEnC,IAAIO,MAAM,CAACE,QAAQ,EAAE;IACnB;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACF,MAAM,CAACG,QAAQ,IAAIL,mBAAmB,CAACM,OAAO,CAACJ,MAAM,CAACG,QAAQ,CAAC,IAAI,CAAC,EAAE;MACzE,IAAI;QACFH,MAAM,CAACE,QAAQ,GAAGjB,QAAQ,CAACoB,OAAO,CAACL,MAAM,CAACE,QAAQ,CAAC;MACrD,CAAC,CAAC,OAAOI,EAAE,EAAE,CAAE;IACjB;EACF;EAEA,OAAOtB,KAAK,CAACuB,MAAM,CAACvB,KAAK,CAACwB,MAAM,CAACR,MAAM,CAAC,CAAC;AAC3C;AAEA,SAASS,iBAAiBA,CAAChB,GAAG,EAAE;EAC9B,IAAIO,MAAM,GAAGhB,KAAK,CAACiB,KAAK,CAACR,GAAG,EAAE,IAAI,CAAC;EAEnC,IAAIO,MAAM,CAACE,QAAQ,EAAE;IACnB;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACF,MAAM,CAACG,QAAQ,IAAIL,mBAAmB,CAACM,OAAO,CAACJ,MAAM,CAACG,QAAQ,CAAC,IAAI,CAAC,EAAE;MACzE,IAAI;QACFH,MAAM,CAACE,QAAQ,GAAGjB,QAAQ,CAACyB,SAAS,CAACV,MAAM,CAACE,QAAQ,CAAC;MACvD,CAAC,CAAC,OAAOI,EAAE,EAAE,CAAE;IACjB;EACF;;EAEA;EACA,OAAOtB,KAAK,CAAC2B,MAAM,CAAC3B,KAAK,CAACwB,MAAM,CAACR,MAAM,CAAC,EAAEhB,KAAK,CAAC2B,MAAM,CAACC,YAAY,GAAG,GAAG,CAAC;AAC5E;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,UAAU,EAAEC,OAAO,EAAE;EACvC,IAAI,EAAE,IAAI,YAAYF,UAAU,CAAC,EAAE;IACjC,OAAO,IAAIA,UAAU,CAACC,UAAU,EAAEC,OAAO,CAAC;EAC5C;EAEA,IAAI,CAACA,OAAO,EAAE;IACZ,IAAI,CAACtC,KAAK,CAACuC,QAAQ,CAACF,UAAU,CAAC,EAAE;MAC/BC,OAAO,GAAGD,UAAU,IAAI,CAAC,CAAC;MAC1BA,UAAU,GAAG,SAAS;IACxB;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACG,MAAM,GAAG,IAAInC,YAAY,CAAC,CAAC;;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACoC,KAAK,GAAG,IAAIrC,WAAW,CAAC,CAAC;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACsC,IAAI,GAAG,IAAIvC,UAAU,CAAC,CAAC;;EAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACwC,QAAQ,GAAG,IAAIzC,QAAQ,CAAC,CAAC;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAAC0C,OAAO,GAAG,IAAItC,SAAS,CAAC,CAAC;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACS,YAAY,GAAGA,YAAY;;EAEhC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACO,aAAa,GAAGA,aAAa;;EAElC;AACF;A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"},"metadata":{},"sourceType":"script","externalDependencies":[]}