{"ast":null,"code":"'use strict';\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.error.cause.js\");\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n  return obj;\n}\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isString(obj) {\n  return _class(obj) === '[object String]';\n}\nfunction isObject(obj) {\n  return _class(obj) === '[object Object]';\n}\nfunction isRegExp(obj) {\n  return _class(obj) === '[object RegExp]';\n}\nfunction isFunction(obj) {\n  return _class(obj) === '[object Function]';\n}\nfunction escapeRE(str) {\n  return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http = new RegExp('^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i');\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:': 'http:',\n  'ftp:': 'http:',\n  '//': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n      if (!self.re.no_http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http = new RegExp('^' + self.re.src_auth +\n        // Don't allow single-level domains, because of false positives like '//test'\n        // with code comments\n        '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' + self.re.src_port + self.re.src_host_terminator + self.re.src_path, 'i');\n      }\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') {\n          return 0;\n        }\n        if (pos >= 3 && text[pos - 3] === '/') {\n          return 0;\n        }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n      if (!self.re.mailto) {\n        self.re.mailto = new RegExp('^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i');\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__ = '';\n}\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n  self.onCompile();\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n  re.src_tlds = tlds.join('|');\n  function untpl(tpl) {\n    return tpl.replace('%TLDS%', re.src_tlds);\n  }\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) {\n      return;\n    }\n    var compiled = {\n      validate: null,\n      link: null\n    };\n    self.__compiled__[name] = compiled;\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n      return;\n    }\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n    self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = {\n    validate: null,\n    normalize: createNormalizer()\n  };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__).filter(function (name) {\n    // Filter disabled & fake schemas\n    return name.length > 0 && self.__compiled__[name];\n  }).map(escapeRE).join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\n  self.re.pretest = RegExp('(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@', 'i');\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\r\n * class Match\r\n *\r\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\r\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n    end = self.__last_index__,\n    text = self.__text_cache__.slice(start, end);\n\n  /**\r\n   * Match#schema -> String\r\n   *\r\n   * Prefix (protocol) for matched string.\r\n   **/\n  this.schema = self.__schema__.toLowerCase();\n  /**\r\n   * Match#index -> Number\r\n   *\r\n   * First position of matched string.\r\n   **/\n  this.index = start + shift;\n  /**\r\n   * Match#lastIndex -> Number\r\n   *\r\n   * Next position after matched string.\r\n   **/\n  this.lastIndex = end + shift;\n  /**\r\n   * Match#raw -> String\r\n   *\r\n   * Matched string.\r\n   **/\n  this.raw = text;\n  /**\r\n   * Match#text -> String\r\n   *\r\n   * Notmalized text of matched string.\r\n   **/\n  this.text = text;\n  /**\r\n   * Match#url -> String\r\n   *\r\n   * Normalized url of matched string.\r\n   **/\n  this.url = text;\n}\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n  self.__compiled__[match.schema].normalize(match, self);\n  return match;\n}\n\n/**\r\n * class LinkifyIt\r\n **/\n\n/**\r\n * new LinkifyIt(schemas, options)\r\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\r\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\r\n *\r\n * Creates new linkifier instance with optional additional schemas.\r\n * Can be called without `new` keyword for convenience.\r\n *\r\n * By default understands:\r\n *\r\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\r\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\r\n *\r\n * `schemas` is an object, where each key/value describes protocol/rule:\r\n *\r\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\r\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\r\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\r\n * - __value__ - rule to check tail after link prefix\r\n *   - _String_ - just alias to existing rule\r\n *   - _Object_\r\n *     - _validate_ - validator function (should return matched length on success),\r\n *       or `RegExp`.\r\n *     - _normalize_ - optional function to normalize text & url of matched result\r\n *       (for example, for @twitter mentions).\r\n *\r\n * `options`:\r\n *\r\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\r\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\r\n *   like version numbers. Default `false`.\r\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\r\n *\r\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n  this.__opts__ = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__ = -1;\n  this.__last_index__ = -1; // Next scan position\n  this.__schema__ = '';\n  this.__text_cache__ = '';\n  this.__schemas__ = assign({}, defaultSchemas, schemas);\n  this.__compiled__ = {};\n  this.__tlds__ = tlds_default;\n  this.__tlds_replaced__ = false;\n  this.re = {};\n  compile(this);\n}\n\n/** chainable\r\n * LinkifyIt#add(schema, definition)\r\n * - schema (String): rule name (fixed pattern prefix)\r\n * - definition (String|RegExp|Object): schema definition\r\n *\r\n * Add new rule definition. See constructor description for details.\r\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n/** chainable\r\n * LinkifyIt#set(options)\r\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\r\n *\r\n * Set recognition options for links without schema.\r\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n/**\r\n * LinkifyIt#test(text) -> Boolean\r\n *\r\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\r\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n  if (!text.length) {\n    return false;\n  }\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__ = m[2];\n        this.__index__ = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n          shift = ml.index + ml[1].length;\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__ = '';\n            this.__index__ = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n        shift = me.index + me[1].length;\n        next = me.index + me[0].length;\n        if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {\n          this.__schema__ = 'mailto:';\n          this.__index__ = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n  return this.__index__ >= 0;\n};\n\n/**\r\n * LinkifyIt#pretest(text) -> Boolean\r\n *\r\n * Very quick check, that can give false positives. Returns true if link MAY BE\r\n * can exists. Can be used for speed optimization, when you need to check that\r\n * link NOT exists.\r\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n/**\r\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\r\n * - text (String): text to scan\r\n * - name (String): rule (schema) name\r\n * - position (Number): text offset to check from\r\n *\r\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\r\n * at given position. Returns length of found pattern (0 on fail).\r\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n/**\r\n * LinkifyIt#match(text) -> Array|null\r\n *\r\n * Returns array of found link descriptions or `null` on fail. We strongly\r\n * recommend to use [[LinkifyIt#test]] first, for best speed.\r\n *\r\n * ##### Result match description\r\n *\r\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\r\n *   protocol-neutral  links.\r\n * - __index__ - offset of matched text\r\n * - __lastIndex__ - index of next char after mathch end\r\n * - __raw__ - matched text\r\n * - __text__ - normalized text\r\n * - __url__ - link, generated from matched text\r\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0,\n    result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n  if (result.length) {\n    return result;\n  }\n  return null;\n};\n\n/**\r\n * LinkifyIt#matchAtStart(text) -> Match|null\r\n *\r\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\r\n * of the string, and null otherwise.\r\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n  if (!text.length) return null;\n  var m = this.re.schema_at_start.exec(text);\n  if (!m) return null;\n  var len = this.testSchemaAt(text, m[2], m[0].length);\n  if (!len) return null;\n  this.__schema__ = m[2];\n  this.__index__ = m.index + m[1].length;\n  this.__last_index__ = m.index + m[0].length + len;\n  return createMatch(this, 0);\n};\n\n/** chainable\r\n * LinkifyIt#tlds(list [, keepOld]) -> this\r\n * - list (Array): list of tlds\r\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\r\n *\r\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\r\n * to avoid false positives. By default this algorythm used:\r\n *\r\n * - hostname with any 2-letter root zones are ok.\r\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\r\n *   are ok.\r\n * - encoded (`xn--...`) root zones are ok.\r\n *\r\n * If list is replaced, then exact match for 2-chars root zones will be checked.\r\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [list];\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n  this.__tlds__ = this.__tlds__.concat(list).sort().filter(function (el, idx, arr) {\n    return el !== arr[idx - 1];\n  }).reverse();\n  compile(this);\n  return this;\n};\n\n/**\r\n * LinkifyIt#normalize(match)\r\n *\r\n * Default normalizer (if schema does not define it's own).\r\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) {\n    match.url = 'http://' + match.url;\n  }\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n/**\r\n * LinkifyIt#onCompile()\r\n *\r\n * Override to modify basic RegExp-s.\r\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {};\nmodule.exports = LinkifyIt;","map":{"version":3,"names":["require","assign","obj","sources","Array","prototype","slice","call","arguments","forEach","source","Object","keys","key","_class","toString","isString","isObject","isRegExp","isFunction","escapeRE","str","replace","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","isOptionsObj","reduce","acc","k","hasOwnProperty","defaultSchemas","validate","text","pos","self","tail","re","http","RegExp","src_auth","src_host_port_strict","src_path","test","match","length","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto","src_email_name","src_host_strict","tlds_2ch_src_re","tlds_default","split","resetScanCache","__index__","__text_cache__","createValidator","createNormalizer","normalize","compile","__opts__","tlds","__tlds__","onCompile","__tlds_replaced__","push","src_xn","src_tlds","join","untpl","tpl","email_fuzzy","tpl_email_fuzzy","link_fuzzy","tpl_link_fuzzy","link_no_ip_fuzzy","tpl_link_no_ip_fuzzy","host_fuzzy_test","tpl_host_fuzzy_test","aliases","__compiled__","schemaError","name","val","Error","__schemas__","compiled","link","alias","slist","filter","map","schema_test","src_ZPCc","schema_search","schema_at_start","pretest","Match","shift","start","end","__last_index__","schema","__schema__","toLowerCase","index","lastIndex","raw","url","createMatch","LinkifyIt","schemas","options","add","definition","set","m","ml","me","len","next","tld_pos","at_pos","exec","testSchemaAt","search","indexOf","result","matchAtStart","list","keepOld","isArray","concat","sort","el","idx","arr","reverse","module","exports"],"sources":["C:/Users/居文韬/source/repos/corpus_development_system/node_modules/linkify-it/index.js"],"sourcesContent":["'use strict';\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// Helpers\r\n\r\n// Merge objects\r\n//\r\nfunction assign(obj /*from1, from2, from3, ...*/) {\r\n  var sources = Array.prototype.slice.call(arguments, 1);\r\n\r\n  sources.forEach(function (source) {\r\n    if (!source) { return; }\r\n\r\n    Object.keys(source).forEach(function (key) {\r\n      obj[key] = source[key];\r\n    });\r\n  });\r\n\r\n  return obj;\r\n}\r\n\r\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\r\nfunction isString(obj) { return _class(obj) === '[object String]'; }\r\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\r\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\r\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\r\n\r\n\r\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\nvar defaultOptions = {\r\n  fuzzyLink: true,\r\n  fuzzyEmail: true,\r\n  fuzzyIP: false\r\n};\r\n\r\n\r\nfunction isOptionsObj(obj) {\r\n  return Object.keys(obj || {}).reduce(function (acc, k) {\r\n    return acc || defaultOptions.hasOwnProperty(k);\r\n  }, false);\r\n}\r\n\r\n\r\nvar defaultSchemas = {\r\n  'http:': {\r\n    validate: function (text, pos, self) {\r\n      var tail = text.slice(pos);\r\n\r\n      if (!self.re.http) {\r\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\r\n        self.re.http =  new RegExp(\r\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\r\n        );\r\n      }\r\n      if (self.re.http.test(tail)) {\r\n        return tail.match(self.re.http)[0].length;\r\n      }\r\n      return 0;\r\n    }\r\n  },\r\n  'https:':  'http:',\r\n  'ftp:':    'http:',\r\n  '//':      {\r\n    validate: function (text, pos, self) {\r\n      var tail = text.slice(pos);\r\n\r\n      if (!self.re.no_http) {\r\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\r\n        self.re.no_http =  new RegExp(\r\n          '^' +\r\n          self.re.src_auth +\r\n          // Don't allow single-level domains, because of false positives like '//test'\r\n          // with code comments\r\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\r\n          self.re.src_port +\r\n          self.re.src_host_terminator +\r\n          self.re.src_path,\r\n\r\n          'i'\r\n        );\r\n      }\r\n\r\n      if (self.re.no_http.test(tail)) {\r\n        // should not be `://` & `///`, that protects from errors in protocol name\r\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\r\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\r\n        return tail.match(self.re.no_http)[0].length;\r\n      }\r\n      return 0;\r\n    }\r\n  },\r\n  'mailto:': {\r\n    validate: function (text, pos, self) {\r\n      var tail = text.slice(pos);\r\n\r\n      if (!self.re.mailto) {\r\n        self.re.mailto =  new RegExp(\r\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\r\n        );\r\n      }\r\n      if (self.re.mailto.test(tail)) {\r\n        return tail.match(self.re.mailto)[0].length;\r\n      }\r\n      return 0;\r\n    }\r\n  }\r\n};\r\n\r\n/*eslint-disable max-len*/\r\n\r\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\r\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\r\n\r\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\r\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\r\n\r\n/*eslint-enable max-len*/\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction resetScanCache(self) {\r\n  self.__index__ = -1;\r\n  self.__text_cache__   = '';\r\n}\r\n\r\nfunction createValidator(re) {\r\n  return function (text, pos) {\r\n    var tail = text.slice(pos);\r\n\r\n    if (re.test(tail)) {\r\n      return tail.match(re)[0].length;\r\n    }\r\n    return 0;\r\n  };\r\n}\r\n\r\nfunction createNormalizer() {\r\n  return function (match, self) {\r\n    self.normalize(match);\r\n  };\r\n}\r\n\r\n// Schemas compiler. Build regexps.\r\n//\r\nfunction compile(self) {\r\n\r\n  // Load & clone RE patterns.\r\n  var re = self.re = require('./lib/re')(self.__opts__);\r\n\r\n  // Define dynamic patterns\r\n  var tlds = self.__tlds__.slice();\r\n\r\n  self.onCompile();\r\n\r\n  if (!self.__tlds_replaced__) {\r\n    tlds.push(tlds_2ch_src_re);\r\n  }\r\n  tlds.push(re.src_xn);\r\n\r\n  re.src_tlds = tlds.join('|');\r\n\r\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\r\n\r\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\r\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\r\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\r\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\r\n\r\n  //\r\n  // Compile each schema\r\n  //\r\n\r\n  var aliases = [];\r\n\r\n  self.__compiled__ = {}; // Reset compiled data\r\n\r\n  function schemaError(name, val) {\r\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\r\n  }\r\n\r\n  Object.keys(self.__schemas__).forEach(function (name) {\r\n    var val = self.__schemas__[name];\r\n\r\n    // skip disabled methods\r\n    if (val === null) { return; }\r\n\r\n    var compiled = { validate: null, link: null };\r\n\r\n    self.__compiled__[name] = compiled;\r\n\r\n    if (isObject(val)) {\r\n      if (isRegExp(val.validate)) {\r\n        compiled.validate = createValidator(val.validate);\r\n      } else if (isFunction(val.validate)) {\r\n        compiled.validate = val.validate;\r\n      } else {\r\n        schemaError(name, val);\r\n      }\r\n\r\n      if (isFunction(val.normalize)) {\r\n        compiled.normalize = val.normalize;\r\n      } else if (!val.normalize) {\r\n        compiled.normalize = createNormalizer();\r\n      } else {\r\n        schemaError(name, val);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (isString(val)) {\r\n      aliases.push(name);\r\n      return;\r\n    }\r\n\r\n    schemaError(name, val);\r\n  });\r\n\r\n  //\r\n  // Compile postponed aliases\r\n  //\r\n\r\n  aliases.forEach(function (alias) {\r\n    if (!self.__compiled__[self.__schemas__[alias]]) {\r\n      // Silently fail on missed schemas to avoid errons on disable.\r\n      // schemaError(alias, self.__schemas__[alias]);\r\n      return;\r\n    }\r\n\r\n    self.__compiled__[alias].validate =\r\n      self.__compiled__[self.__schemas__[alias]].validate;\r\n    self.__compiled__[alias].normalize =\r\n      self.__compiled__[self.__schemas__[alias]].normalize;\r\n  });\r\n\r\n  //\r\n  // Fake record for guessed links\r\n  //\r\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\r\n\r\n  //\r\n  // Build schema condition\r\n  //\r\n  var slist = Object.keys(self.__compiled__)\r\n                      .filter(function (name) {\r\n                        // Filter disabled & fake schemas\r\n                        return name.length > 0 && self.__compiled__[name];\r\n                      })\r\n                      .map(escapeRE)\r\n                      .join('|');\r\n  // (?!_) cause 1.5x slowdown\r\n  self.re.schema_test     = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\r\n  self.re.schema_search   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\r\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\r\n\r\n  self.re.pretest = RegExp(\r\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\r\n    'i'\r\n  );\r\n\r\n  //\r\n  // Cleanup\r\n  //\r\n\r\n  resetScanCache(self);\r\n}\r\n\r\n/**\r\n * class Match\r\n *\r\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\r\n **/\r\nfunction Match(self, shift) {\r\n  var start = self.__index__,\r\n      end   = self.__last_index__,\r\n      text  = self.__text_cache__.slice(start, end);\r\n\r\n  /**\r\n   * Match#schema -> String\r\n   *\r\n   * Prefix (protocol) for matched string.\r\n   **/\r\n  this.schema    = self.__schema__.toLowerCase();\r\n  /**\r\n   * Match#index -> Number\r\n   *\r\n   * First position of matched string.\r\n   **/\r\n  this.index     = start + shift;\r\n  /**\r\n   * Match#lastIndex -> Number\r\n   *\r\n   * Next position after matched string.\r\n   **/\r\n  this.lastIndex = end + shift;\r\n  /**\r\n   * Match#raw -> String\r\n   *\r\n   * Matched string.\r\n   **/\r\n  this.raw       = text;\r\n  /**\r\n   * Match#text -> String\r\n   *\r\n   * Notmalized text of matched string.\r\n   **/\r\n  this.text      = text;\r\n  /**\r\n   * Match#url -> String\r\n   *\r\n   * Normalized url of matched string.\r\n   **/\r\n  this.url       = text;\r\n}\r\n\r\nfunction createMatch(self, shift) {\r\n  var match = new Match(self, shift);\r\n\r\n  self.__compiled__[match.schema].normalize(match, self);\r\n\r\n  return match;\r\n}\r\n\r\n\r\n/**\r\n * class LinkifyIt\r\n **/\r\n\r\n/**\r\n * new LinkifyIt(schemas, options)\r\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\r\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\r\n *\r\n * Creates new linkifier instance with optional additional schemas.\r\n * Can be called without `new` keyword for convenience.\r\n *\r\n * By default understands:\r\n *\r\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\r\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\r\n *\r\n * `schemas` is an object, where each key/value describes protocol/rule:\r\n *\r\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\r\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\r\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\r\n * - __value__ - rule to check tail after link prefix\r\n *   - _String_ - just alias to existing rule\r\n *   - _Object_\r\n *     - _validate_ - validator function (should return matched length on success),\r\n *       or `RegExp`.\r\n *     - _normalize_ - optional function to normalize text & url of matched result\r\n *       (for example, for @twitter mentions).\r\n *\r\n * `options`:\r\n *\r\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\r\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\r\n *   like version numbers. Default `false`.\r\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\r\n *\r\n **/\r\nfunction LinkifyIt(schemas, options) {\r\n  if (!(this instanceof LinkifyIt)) {\r\n    return new LinkifyIt(schemas, options);\r\n  }\r\n\r\n  if (!options) {\r\n    if (isOptionsObj(schemas)) {\r\n      options = schemas;\r\n      schemas = {};\r\n    }\r\n  }\r\n\r\n  this.__opts__           = assign({}, defaultOptions, options);\r\n\r\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\r\n  this.__index__          = -1;\r\n  this.__last_index__     = -1; // Next scan position\r\n  this.__schema__         = '';\r\n  this.__text_cache__     = '';\r\n\r\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\r\n  this.__compiled__       = {};\r\n\r\n  this.__tlds__           = tlds_default;\r\n  this.__tlds_replaced__  = false;\r\n\r\n  this.re = {};\r\n\r\n  compile(this);\r\n}\r\n\r\n\r\n/** chainable\r\n * LinkifyIt#add(schema, definition)\r\n * - schema (String): rule name (fixed pattern prefix)\r\n * - definition (String|RegExp|Object): schema definition\r\n *\r\n * Add new rule definition. See constructor description for details.\r\n **/\r\nLinkifyIt.prototype.add = function add(schema, definition) {\r\n  this.__schemas__[schema] = definition;\r\n  compile(this);\r\n  return this;\r\n};\r\n\r\n\r\n/** chainable\r\n * LinkifyIt#set(options)\r\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\r\n *\r\n * Set recognition options for links without schema.\r\n **/\r\nLinkifyIt.prototype.set = function set(options) {\r\n  this.__opts__ = assign(this.__opts__, options);\r\n  return this;\r\n};\r\n\r\n\r\n/**\r\n * LinkifyIt#test(text) -> Boolean\r\n *\r\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\r\n **/\r\nLinkifyIt.prototype.test = function test(text) {\r\n  // Reset scan cache\r\n  this.__text_cache__ = text;\r\n  this.__index__      = -1;\r\n\r\n  if (!text.length) { return false; }\r\n\r\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\r\n\r\n  // try to scan for link with schema - that's the most simple rule\r\n  if (this.re.schema_test.test(text)) {\r\n    re = this.re.schema_search;\r\n    re.lastIndex = 0;\r\n    while ((m = re.exec(text)) !== null) {\r\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\r\n      if (len) {\r\n        this.__schema__     = m[2];\r\n        this.__index__      = m.index + m[1].length;\r\n        this.__last_index__ = m.index + m[0].length + len;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\r\n    // guess schemaless links\r\n    tld_pos = text.search(this.re.host_fuzzy_test);\r\n    if (tld_pos >= 0) {\r\n      // if tld is located after found link - no need to check fuzzy pattern\r\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\r\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\r\n\r\n          shift = ml.index + ml[1].length;\r\n\r\n          if (this.__index__ < 0 || shift < this.__index__) {\r\n            this.__schema__     = '';\r\n            this.__index__      = shift;\r\n            this.__last_index__ = ml.index + ml[0].length;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\r\n    // guess schemaless emails\r\n    at_pos = text.indexOf('@');\r\n    if (at_pos >= 0) {\r\n      // We can't skip this check, because this cases are possible:\r\n      // 192.168.1.1@gmail.com, my.in@example.com\r\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\r\n\r\n        shift = me.index + me[1].length;\r\n        next  = me.index + me[0].length;\r\n\r\n        if (this.__index__ < 0 || shift < this.__index__ ||\r\n            (shift === this.__index__ && next > this.__last_index__)) {\r\n          this.__schema__     = 'mailto:';\r\n          this.__index__      = shift;\r\n          this.__last_index__ = next;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return this.__index__ >= 0;\r\n};\r\n\r\n\r\n/**\r\n * LinkifyIt#pretest(text) -> Boolean\r\n *\r\n * Very quick check, that can give false positives. Returns true if link MAY BE\r\n * can exists. Can be used for speed optimization, when you need to check that\r\n * link NOT exists.\r\n **/\r\nLinkifyIt.prototype.pretest = function pretest(text) {\r\n  return this.re.pretest.test(text);\r\n};\r\n\r\n\r\n/**\r\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\r\n * - text (String): text to scan\r\n * - name (String): rule (schema) name\r\n * - position (Number): text offset to check from\r\n *\r\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\r\n * at given position. Returns length of found pattern (0 on fail).\r\n **/\r\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\r\n  // If not supported schema check requested - terminate\r\n  if (!this.__compiled__[schema.toLowerCase()]) {\r\n    return 0;\r\n  }\r\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\r\n};\r\n\r\n\r\n/**\r\n * LinkifyIt#match(text) -> Array|null\r\n *\r\n * Returns array of found link descriptions or `null` on fail. We strongly\r\n * recommend to use [[LinkifyIt#test]] first, for best speed.\r\n *\r\n * ##### Result match description\r\n *\r\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\r\n *   protocol-neutral  links.\r\n * - __index__ - offset of matched text\r\n * - __lastIndex__ - index of next char after mathch end\r\n * - __raw__ - matched text\r\n * - __text__ - normalized text\r\n * - __url__ - link, generated from matched text\r\n **/\r\nLinkifyIt.prototype.match = function match(text) {\r\n  var shift = 0, result = [];\r\n\r\n  // Try to take previous element from cache, if .test() called before\r\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\r\n    result.push(createMatch(this, shift));\r\n    shift = this.__last_index__;\r\n  }\r\n\r\n  // Cut head if cache was used\r\n  var tail = shift ? text.slice(shift) : text;\r\n\r\n  // Scan string until end reached\r\n  while (this.test(tail)) {\r\n    result.push(createMatch(this, shift));\r\n\r\n    tail = tail.slice(this.__last_index__);\r\n    shift += this.__last_index__;\r\n  }\r\n\r\n  if (result.length) {\r\n    return result;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n\r\n/**\r\n * LinkifyIt#matchAtStart(text) -> Match|null\r\n *\r\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\r\n * of the string, and null otherwise.\r\n **/\r\nLinkifyIt.prototype.matchAtStart = function matchAtStart(text) {\r\n  // Reset scan cache\r\n  this.__text_cache__ = text;\r\n  this.__index__      = -1;\r\n\r\n  if (!text.length) return null;\r\n\r\n  var m = this.re.schema_at_start.exec(text);\r\n  if (!m) return null;\r\n\r\n  var len = this.testSchemaAt(text, m[2], m[0].length);\r\n  if (!len) return null;\r\n\r\n  this.__schema__     = m[2];\r\n  this.__index__      = m.index + m[1].length;\r\n  this.__last_index__ = m.index + m[0].length + len;\r\n\r\n  return createMatch(this, 0);\r\n};\r\n\r\n\r\n/** chainable\r\n * LinkifyIt#tlds(list [, keepOld]) -> this\r\n * - list (Array): list of tlds\r\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\r\n *\r\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\r\n * to avoid false positives. By default this algorythm used:\r\n *\r\n * - hostname with any 2-letter root zones are ok.\r\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\r\n *   are ok.\r\n * - encoded (`xn--...`) root zones are ok.\r\n *\r\n * If list is replaced, then exact match for 2-chars root zones will be checked.\r\n **/\r\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\r\n  list = Array.isArray(list) ? list : [ list ];\r\n\r\n  if (!keepOld) {\r\n    this.__tlds__ = list.slice();\r\n    this.__tlds_replaced__ = true;\r\n    compile(this);\r\n    return this;\r\n  }\r\n\r\n  this.__tlds__ = this.__tlds__.concat(list)\r\n                                  .sort()\r\n                                  .filter(function (el, idx, arr) {\r\n                                    return el !== arr[idx - 1];\r\n                                  })\r\n                                  .reverse();\r\n\r\n  compile(this);\r\n  return this;\r\n};\r\n\r\n/**\r\n * LinkifyIt#normalize(match)\r\n *\r\n * Default normalizer (if schema does not define it's own).\r\n **/\r\nLinkifyIt.prototype.normalize = function normalize(match) {\r\n\r\n  // Do minimal possible changes by default. Need to collect feedback prior\r\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\r\n\r\n  if (!match.schema) { match.url = 'http://' + match.url; }\r\n\r\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\r\n    match.url = 'mailto:' + match.url;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * LinkifyIt#onCompile()\r\n *\r\n * Override to modify basic RegExp-s.\r\n **/\r\nLinkifyIt.prototype.onCompile = function onCompile() {\r\n};\r\n\r\n\r\nmodule.exports = LinkifyIt;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}