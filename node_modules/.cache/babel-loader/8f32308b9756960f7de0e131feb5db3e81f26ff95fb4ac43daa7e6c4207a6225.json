{"ast":null,"code":"/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\r\n * Throttle execution of a function. Especially useful for rate limiting\r\n * execution of handlers on events like resize and scroll.\r\n *\r\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\r\n * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\r\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\r\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\r\n *                                    the internal counter is reset)\r\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\r\n *                                    to `callback` when the throttled-function is executed.\r\n * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\r\n *                                    schedule `callback` to execute after `delay` ms.\r\n *\r\n * @return {Function}  A new, throttled, function.\r\n */\nmodule.exports = function (delay, noTrailing, callback, debounceMode) {\n  // After wrapper has stopped being called, this timeout ensures that\n  // `callback` is executed at the proper times in `throttle` and `end`\n  // debounce modes.\n  var timeoutID;\n\n  // Keep track of the last time `callback` was executed.\n  var lastExec = 0;\n\n  // `noTrailing` defaults to falsy.\n  if (typeof noTrailing !== 'boolean') {\n    debounceMode = callback;\n    callback = noTrailing;\n    noTrailing = undefined;\n  }\n\n  // The `wrapper` function encapsulates all of the throttling / debouncing\n  // functionality and when executed will limit the rate at which `callback`\n  // is executed.\n  function wrapper() {\n    var self = this;\n    var elapsed = Number(new Date()) - lastExec;\n    var args = arguments;\n\n    // Execute `callback` and update the `lastExec` timestamp.\n    function exec() {\n      lastExec = Number(new Date());\n      callback.apply(self, args);\n    }\n\n    // If `debounceMode` is true (at begin) this is used to clear the flag\n    // to allow future `callback` executions.\n    function clear() {\n      timeoutID = undefined;\n    }\n    if (debounceMode && !timeoutID) {\n      // Since `wrapper` is being called for the first time and\n      // `debounceMode` is true (at begin), execute `callback`.\n      exec();\n    }\n\n    // Clear any existing timeout.\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n    if (debounceMode === undefined && elapsed > delay) {\n      // In throttle mode, if `delay` time has been exceeded, execute\n      // `callback`.\n      exec();\n    } else if (noTrailing !== true) {\n      // In trailing throttle mode, since `delay` time has not been\n      // exceeded, schedule `callback` to execute `delay` ms after most\n      // recent execution.\n      //\n      // If `debounceMode` is true (at begin), schedule `clear` to execute\n      // after `delay` ms.\n      //\n      // If `debounceMode` is false (at end), schedule `callback` to\n      // execute after `delay` ms.\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  // Return the wrapper function.\n  return wrapper;\n};","map":{"version":3,"names":["module","exports","delay","noTrailing","callback","debounceMode","timeoutID","lastExec","undefined","wrapper","self","elapsed","Number","Date","args","arguments","exec","apply","clear","clearTimeout","setTimeout"],"sources":["C:/Users/居文韬/source/repos/corpus_development_system/node_modules/throttle-debounce/throttle.js"],"sourcesContent":["/* eslint-disable no-undefined,no-param-reassign,no-shadow */\r\n\r\n/**\r\n * Throttle execution of a function. Especially useful for rate limiting\r\n * execution of handlers on events like resize and scroll.\r\n *\r\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\r\n * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\r\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\r\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\r\n *                                    the internal counter is reset)\r\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\r\n *                                    to `callback` when the throttled-function is executed.\r\n * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\r\n *                                    schedule `callback` to execute after `delay` ms.\r\n *\r\n * @return {Function}  A new, throttled, function.\r\n */\r\nmodule.exports = function ( delay, noTrailing, callback, debounceMode ) {\r\n\r\n\t// After wrapper has stopped being called, this timeout ensures that\r\n\t// `callback` is executed at the proper times in `throttle` and `end`\r\n\t// debounce modes.\r\n\tvar timeoutID;\r\n\r\n\t// Keep track of the last time `callback` was executed.\r\n\tvar lastExec = 0;\r\n\r\n\t// `noTrailing` defaults to falsy.\r\n\tif ( typeof noTrailing !== 'boolean' ) {\r\n\t\tdebounceMode = callback;\r\n\t\tcallback = noTrailing;\r\n\t\tnoTrailing = undefined;\r\n\t}\r\n\r\n\t// The `wrapper` function encapsulates all of the throttling / debouncing\r\n\t// functionality and when executed will limit the rate at which `callback`\r\n\t// is executed.\r\n\tfunction wrapper () {\r\n\r\n\t\tvar self = this;\r\n\t\tvar elapsed = Number(new Date()) - lastExec;\r\n\t\tvar args = arguments;\r\n\r\n\t\t// Execute `callback` and update the `lastExec` timestamp.\r\n\t\tfunction exec () {\r\n\t\t\tlastExec = Number(new Date());\r\n\t\t\tcallback.apply(self, args);\r\n\t\t}\r\n\r\n\t\t// If `debounceMode` is true (at begin) this is used to clear the flag\r\n\t\t// to allow future `callback` executions.\r\n\t\tfunction clear () {\r\n\t\t\ttimeoutID = undefined;\r\n\t\t}\r\n\r\n\t\tif ( debounceMode && !timeoutID ) {\r\n\t\t\t// Since `wrapper` is being called for the first time and\r\n\t\t\t// `debounceMode` is true (at begin), execute `callback`.\r\n\t\t\texec();\r\n\t\t}\r\n\r\n\t\t// Clear any existing timeout.\r\n\t\tif ( timeoutID ) {\r\n\t\t\tclearTimeout(timeoutID);\r\n\t\t}\r\n\r\n\t\tif ( debounceMode === undefined && elapsed > delay ) {\r\n\t\t\t// In throttle mode, if `delay` time has been exceeded, execute\r\n\t\t\t// `callback`.\r\n\t\t\texec();\r\n\r\n\t\t} else if ( noTrailing !== true ) {\r\n\t\t\t// In trailing throttle mode, since `delay` time has not been\r\n\t\t\t// exceeded, schedule `callback` to execute `delay` ms after most\r\n\t\t\t// recent execution.\r\n\t\t\t//\r\n\t\t\t// If `debounceMode` is true (at begin), schedule `clear` to execute\r\n\t\t\t// after `delay` ms.\r\n\t\t\t//\r\n\t\t\t// If `debounceMode` is false (at end), schedule `callback` to\r\n\t\t\t// execute after `delay` ms.\r\n\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Return the wrapper function.\r\n\treturn wrapper;\r\n\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG,UAAWC,KAAK,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,YAAY,EAAG;EAEvE;EACA;EACA;EACA,IAAIC,SAAS;;EAEb;EACA,IAAIC,QAAQ,GAAG,CAAC;;EAEhB;EACA,IAAK,OAAOJ,UAAU,KAAK,SAAS,EAAG;IACtCE,YAAY,GAAGD,QAAQ;IACvBA,QAAQ,GAAGD,UAAU;IACrBA,UAAU,GAAGK,SAAS;EACvB;;EAEA;EACA;EACA;EACA,SAASC,OAAOA,CAAA,EAAI;IAEnB,IAAIC,IAAI,GAAG,IAAI;IACf,IAAIC,OAAO,GAAGC,MAAM,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC,GAAGN,QAAQ;IAC3C,IAAIO,IAAI,GAAGC,SAAS;;IAEpB;IACA,SAASC,IAAIA,CAAA,EAAI;MAChBT,QAAQ,GAAGK,MAAM,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAC7BT,QAAQ,CAACa,KAAK,CAACP,IAAI,EAAEI,IAAI,CAAC;IAC3B;;IAEA;IACA;IACA,SAASI,KAAKA,CAAA,EAAI;MACjBZ,SAAS,GAAGE,SAAS;IACtB;IAEA,IAAKH,YAAY,IAAI,CAACC,SAAS,EAAG;MACjC;MACA;MACAU,IAAI,CAAC,CAAC;IACP;;IAEA;IACA,IAAKV,SAAS,EAAG;MAChBa,YAAY,CAACb,SAAS,CAAC;IACxB;IAEA,IAAKD,YAAY,KAAKG,SAAS,IAAIG,OAAO,GAAGT,KAAK,EAAG;MACpD;MACA;MACAc,IAAI,CAAC,CAAC;IAEP,CAAC,MAAM,IAAKb,UAAU,KAAK,IAAI,EAAG;MACjC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAG,SAAS,GAAGc,UAAU,CAACf,YAAY,GAAGa,KAAK,GAAGF,IAAI,EAAEX,YAAY,KAAKG,SAAS,GAAGN,KAAK,GAAGS,OAAO,GAAGT,KAAK,CAAC;IAC1G;EAED;;EAEA;EACA,OAAOO,OAAO;AAEf,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}